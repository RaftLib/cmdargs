if( UNIX )
##
# Check for CXX11 or greater
##
include( CheckCXXCompilerFlag )
check_cxx_compiler_flag( "-std=c++11" COMPILER_SUPPORTS_CXX11 )
if( COMPILER_SUPPORTS_CXX11 )
 set( CMAKE_CXX_STANDARD 11 )
else()
 message( FATAL_ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a newer compiler" )
endif()
##
# Check for c99 or greater
##
include( CheckCCompilerFlag )
check_c_compiler_flag( "-std=c99" COMPILER_SUPPORTS_C99 )
if( COMPILER_SUPPORTS_C99 )
 set( CMAKE_C_STANDARD 99 )
else()
 message( FATAL_ERROR "The compiler ${CMAKE_C_COMPILER} has no c99 support. Please use a newer compiler" )
endif()
set( CXX_STANDARD ON )
set( C_STANDARD ON )
endif( UNIX )

set( LIBSRC command_arguments.cpp command_option_base.cpp )

include_directories( ${PROJECT_SOURCE_DIR}/include  
                     ${PROJECT_SOURCE_DIR}/include/cmdargs ) 

add_library( cmdargs ${LIBSRC} )

# Enable warnings if using clang or gcc.
if ( "${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang" 
  OR "${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU" )

target_compile_options( cmdargs
                        PUBLIC
                        "-W" "-Wall" "-Wextra" "-Wpedantic" "-Wno-unused-parameter" )

endif()

install( TARGETS cmdargs
         ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib )
